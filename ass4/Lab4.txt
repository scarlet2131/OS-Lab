1. Write a program in C language to implement Multilevel Feedback Queue sceduling algorithm. Use five ready queues and assign priorities to every queue. Use Round Robin scheduling scheme for every queues except the queue with lowest priority, which will use FCFS policy. A process may be downgraded from these queues (except the lowest priority queue), however, before downgrading, the process will get maximum two chances in a queue. Your program will take necessary input values for each process (CPU burst time, arrival time, arrival time ready queue, priority, quatum time, how many processes, etc.). The program will output the sequence of processes, which access the CPU. Maintain all the queues using linked list only.

Do not use any IO burst. For CPU burst, simply mention the total duration of CPU burst for the process.

Your program should output the following:
1) The sequence of process (including the ready queue from which it has been scheduled) to be executed along with the identifier
2) Waiting time of every process and consequently average waiting time of the scheduling.
3) Turn around time of every process and consequently average turn around time of the scheduling.
4) Response time of each process and consequently average response time of the scheduling.

Marks: 25

2. Write a program in C language that will create two threads among which one will generate prime numbers from 2 to some user input value and the other will divide the same user input values by the prime numbers generated by the first thread. The output should be in the approprite sequence i.e., the order of your division output should be equivalent to the sequence of prime numbers generated by the first thread.

Example:
User Input: 15

Prime number Sequence: 2, 3, 5, 7, 11, 13
Output Sequence: 7.5, 5, 3, 2.142.., 1.3636.., 1.153...

You have to use shared variable to solve this problem and hence you have to solve the synchronization problem. Therefore, implement the followowing synchronization strategies:

1) Using Test and Set instruction
2) Using Peterson's solution
3) Using Swap function
4) Using Semaphore

Also check the result without handling the synchronization issue.

Marks: 25









